{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./counter.service\";\nexport class UserService {\n  constructor(counterService) {\n    this.counterService = counterService;\n    this.activeUsers = ['Max', 'Anna'];\n    this.inactiveUsers = ['Chris', 'Manu'];\n  }\n  setToActive(id) {\n    this.activeUsers.push(this.inactiveUsers[id]);\n    this.inactiveUsers.splice(id, 1);\n    this.counterService.incrementInActiveToActive();\n  }\n  setToInactive(id) {\n    this.inactiveUsers.push(this.inactiveUsers[id]);\n    this.activeUsers.splice(id, 1);\n    t;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.CounterService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":";;AAIA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAHlC,gBAAW,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;IAC7B,kBAAa,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;EAEqB;EAEtDC,WAAW,CAACC,EAAU;IACpB,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAACC,aAAa,CAACH,EAAE,CAAC,CAAC;IAC7C,IAAI,CAACG,aAAa,CAACC,MAAM,CAACJ,EAAE,EAAE,CAAC,CAAC;IAChC,IAAI,CAACF,cAAc,CAACO,yBAAyB,EAAE;EACjD;EAEAC,aAAa,CAACN,EAAU;IACtB,IAAI,CAACG,aAAa,CAACD,IAAI,CAAC,IAAI,CAACC,aAAa,CAACH,EAAE,CAAC,CAAC;IAC/C,IAAI,CAACC,WAAW,CAACG,MAAM,CAACJ,EAAE,EAAE,CAAC,CAAC;IAC9BO,CAAC;EACH;;AAhBWX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;AAAA","names":["UserService","constructor","counterService","setToActive","id","activeUsers","push","inactiveUsers","splice","incrementInActiveToActive","setToInactive","t","factory"],"sourceRoot":"","sources":["/home/dev/Angular/Practice/activeInactive/src/app/user.service.ts"],"sourcesContent":["import { CounterService } from './counter.service';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class UserService {\n  activeUsers = ['Max', 'Anna'];\n  inactiveUsers = ['Chris', 'Manu'];\n\n  constructor(private counterService: CounterService) { }\n\n  setToActive(id: number) {\n    this.activeUsers.push(this.inactiveUsers[id]);\n    this.inactiveUsers.splice(id, 1)\n    this.counterService.incrementInActiveToActive();\n  }\n\n  setToInactive(id: number) {\n    this.inactiveUsers.push(this.inactiveUsers[id]);\n    this.activeUsers.splice(id, 1)\n    t\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}